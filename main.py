import requests
import telebot
from telebot import types

# --- –¢–æ–∫–µ–Ω –±–æ—Ç–∞ ---
BOT_TOKEN = '8008617718:AAHYtH1YadkHebM2r8MQrMnRadYLTXdf4WQ'

# --- API –¥–ª—è –≤–∞–ª—é—Ç ---
EXCHANGE_API_URL = "https://api.exchangerate.host/latest?base=USD&symbols=UAH,EUR,PLN"

# CoinGecko API –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏
CRYPTO_API_URL = "https://api.coingecko.com/api/v3/simple/price"

# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ ---
bot = telebot.TeleBot(BOT_TOKEN)

# --- –ö–æ–º–∞–Ω–¥–∏ /start —Ç–∞ /help –∑ –∫–Ω–æ–ø–∫–∞–º–∏ ---
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    welcome_text = (
        "–ü—Ä–∏–≤—ñ—Ç! üëã –Ø –±–æ—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫—É—Ä—Å—ñ–≤ –≤–∞–ª—é—Ç, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏ —Ç–∞ —Ü—ñ–Ω –Ω–∞ –ø–∞–ª—å–Ω–µ.\n"
        "–í–∏–±–µ—Ä—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É –Ω–∏–∂—á–µ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å —ó—ó –≤—Ä—É—á–Ω—É:"
    )

    # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row("üí∞ –ö—É—Ä—Å –≤–∞–ª—é—Ç", "‚Çø –ö—Ä–∏–ø—Ç–æ BTC/ETH/USDT")
    keyboard.row("‚Çø –¢–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç", "‚õΩ –¶—ñ–Ω–∏ –Ω–∞ –ø–∞–ª—å–Ω–µ")

    bot.send_message(message.chat.id, welcome_text, reply_markup=keyboard)

# --- –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–æ–∫ ---
@bot.message_handler(func=lambda message: True)
def handle_buttons(message):
    text = message.text
    if text == "üí∞ –ö—É—Ä—Å –≤–∞–ª—é—Ç":
        get_exchange_rates(message)
    elif text == "‚Çø –ö—Ä–∏–ø—Ç–æ BTC/ETH/USDT":
        get_crypto_prices(message)
    elif text == "‚Çø –¢–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç":
        get_top10_crypto(message)
    elif text == "‚õΩ –¶—ñ–Ω–∏ –Ω–∞ –ø–∞–ª—å–Ω–µ":
        get_fuel_prices(message)

# --- –ö—É—Ä—Å –≤–∞–ª—é—Ç ---
def get_exchange_rates(message):
    try:
        response = requests.get(EXCHANGE_API_URL)
        data = response.json()

        usd_to_uah = data['rates']['UAH']
        eur_to_uah = usd_to_uah / data['rates']['EUR']
        pln_to_uah = usd_to_uah / data['rates']['PLN']

        exchange_text = (
            f"üí± **–ö—É—Ä—Å –≤–∞–ª—é—Ç (–¥–æ UAH)**\n\n"
            f"üá∫üá∏ USD: {usd_to_uah:,.2f} –≥—Ä–Ω\n"
            f"üá™üá∫ EUR: {eur_to_uah:,.2f} –≥—Ä–Ω\n"
            f"üáµüá± PLN: {pln_to_uah:,.2f} –≥—Ä–Ω"
        )
        bot.reply_to(message, exchange_text, parse_mode='Markdown')
    except Exception as e:
        bot.reply_to(message, "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å –≤–∞–ª—é—Ç.")
        print(f"–ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—é—Ç: {e}")

# --- 3 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏ ---
def get_crypto_prices(message):
    try:
        params = {'ids':'bitcoin,ethereum,tether','vs_currencies':'usd,uah'}
        response = requests.get(CRYPTO_API_URL, params=params)
        data = response.json()

        crypto_text = (
            f"‚Çø **–¶—ñ–Ω–∏ –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É**\n\n"
            f"üìä BTC: {data['bitcoin']['usd']:.2f}$ / {data['bitcoin']['uah']:.0f} –≥—Ä–Ω\n"
            f"üü£ ETH: {data['ethereum']['usd']:.2f}$ / {data['ethereum']['uah']:.0f} –≥—Ä–Ω\n"
            f"üü¢ USDT: {data['tether']['usd']:.2f}$ / {data['tether']['uah']:.2f} –≥—Ä–Ω"
        )
        bot.reply_to(message, crypto_text, parse_mode='Markdown')
    except Exception as e:
        bot.reply_to(message, "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏.")
        print(f"–ü–æ–º–∏–ª–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏: {e}")

# --- –¢–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç ---
def get_top10_crypto(message):
    try:
        top10 = {
            "bitcoin": "‚Çø",
            "ethereum": "üü£",
            "tether": "üü¢",
            "binancecoin": "üü°",
            "usd-coin": "üíµ",
            "ripple": "üíß",
            "cardano": "üîµ",
            "solana": "üåä",
            "dogecoin": "üê∂",
            "polkadot": "‚ö´"
        }
        params = {'ids': ','.join(top10.keys()), 'vs_currencies':'usd,uah'}
        response = requests.get(CRYPTO_API_URL, params=params)
        data = response.json()

        text = "‚Çø **–¢–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç**\n\n"
        for coin, emoji in top10.items():
            prices = data.get(coin)
            if prices:
                text += f"{emoji} {coin.upper()}: {prices['usd']:.2f}$ / {prices['uah']:.0f} –≥—Ä–Ω\n"

        bot.reply_to(message, text, parse_mode='Markdown')
    except Exception as e:
        bot.reply_to(message, "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.")
        print(f"–ü–æ–º–∏–ª–∫–∞ —Ç–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {e}")

# --- –¶—ñ–Ω–∏ –Ω–∞ –ø–∞–ª—å–Ω–µ ---
def get_fuel_prices(message):
    try:
        diesel = 57.0
        petrol = 53.0
        gas = 27.0

        fuel_text = (
            f"‚õΩ **–¶—ñ–Ω–∏ –Ω–∞ –ø–∞–ª—å–Ω–µ –≤ –£–∫—Ä–∞—ó–Ω—ñ**\n\n"
            f"üõ¢ –î–∏–∑–µ–ª—å: {diesel:.2f} –≥—Ä–Ω/–ª\n"
            f"‚õΩ –ë–µ–Ω–∑–∏–Ω: {petrol:.2f} –≥—Ä–Ω/–ª\n"
            f"üí® –ì–∞–∑: {gas:.2f} –≥—Ä–Ω/–ª"
        )
        bot.reply_to(message, fuel_text)
    except Exception as e:
        bot.reply_to(message, "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω–∏ –Ω–∞ –ø–∞–ª—å–Ω–µ.")
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø–∞–ª—å–Ω–æ–≥–æ: {e}")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ polling ---
if __name__ == "__main__":
    # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–∏–π webhook (—â–æ–± –Ω–µ –±—É–ª–æ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É)
    bot.remove_webhook()
    print("Webhook –≤–∏–¥–∞–ª–µ–Ω–æ, –º–æ–∂–Ω–∞ —Å—Ç–∞—Ä—Ç—É–≤–∞—Ç–∏ polling")

    print("Bot is running in polling mode...")
    bot.infinity_polling()
