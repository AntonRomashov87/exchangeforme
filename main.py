import os
import telebot
import requests
from flask import Flask, request
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

# --- –¢–æ–∫–µ–Ω –±–æ—Ç–∞ ---
BOT_TOKEN = '8008617718:AAHYtH1YadkHebM2r8MQrMnRadYLTXdf4WQ'

# --- API –¥–ª—è –≤–∞–ª—é—Ç ---
EXCHANGE_API_URL = "https://api.exchangerate.host/latest?base=USD&symbols=UAH,EUR,PLN"

# CoinGecko API –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏
CRYPTO_API_URL = "https://api.coingecko.com/api/v3/simple/price"

# –¶—ñ–Ω–∏ –Ω–∞ –ø–∞–ª—å–Ω–µ (–º–æ–∂–Ω–∞ –∑–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω–∏–π API)
FUEL_PRICES = {'–ë–µ–Ω–∑–∏–Ω': 53.50, '–î–∏–∑–µ–ª—å': 51.20, '–ì–∞–∑': 28.70}

# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ Flask ---
bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

# --- –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–∏–π webhook —ñ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –Ω–æ–≤–∏–π ---
bot.remove_webhook()
WEBHOOK_URL = f"{os.environ.get('RENDER_EXTERNAL_URL')}/webhook"
bot.set_webhook(url=WEBHOOK_URL)

# --- –°—Ç–∞—Ä—Ç —ñ –∫–Ω–æ–ø–∫–∏ ---
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    text = "–ü—Ä–∏–≤—ñ—Ç! üëã –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:"
    
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton("üí∞ –í–∞–ª—é—Ç–∏", callback_data="exchange"),
        InlineKeyboardButton("‚Çø –ö—Ä–∏–ø—Ç–∞", callback_data="crypto"),
        InlineKeyboardButton("‚õΩ –ü–∞–ª–∏–≤–æ", callback_data="fuel")
    )
    bot.send_message(message.chat.id, text, reply_markup=markup)

# --- Callback –¥–ª—è –∫–Ω–æ–ø–æ–∫ ---
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    if call.data == "exchange":
        send_exchange_options(call.message)
    elif call.data == "crypto":
        send_crypto_options(call.message)
    elif call.data == "fuel":
        send_fuel_prices(call.message)
    elif call.data in ["USD", "EUR", "PLN"]:
        send_single_currency(call.message, call.data)
    elif call.data in ["BTC", "ETH", "USDT"]:
        send_single_crypto(call.message, call.data)
    elif call.data in ["–ë–µ–Ω–∑–∏–Ω", "–î–∏–∑–µ–ª—å", "–ì–∞–∑"]:
        send_single_fuel(call.message, call.data)

# --- –í–∏–±—ñ—Ä –≤–∞–ª—é—Ç ---
def send_exchange_options(message):
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton("üá∫üá∏ USD", callback_data="USD"),
        InlineKeyboardButton("üá™üá∫ EUR", callback_data="EUR"),
        InlineKeyboardButton("üáµüá± PLN", callback_data="PLN")
    )
    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç—É:", reply_markup=markup)

def send_single_currency(message, currency):
    try:
        response = requests.get(EXCHANGE_API_URL)
        data = response.json()
        usd_to_uah = data['rates']['UAH']
        if currency == "USD":
            text = f"üá∫üá∏ USD ‚Üí UAH: {usd_to_uah:,.2f} –≥—Ä–Ω"
        elif currency == "EUR":
            eur_to_uah = usd_to_uah / data['rates']['EUR']
            text = f"üá™üá∫ EUR ‚Üí UAH: {eur_to_uah:,.2f} –≥—Ä–Ω"
        elif currency == "PLN":
            pln_to_uah = usd_to_uah / data['rates']['PLN']
            text = f"üáµüá± PLN ‚Üí UAH: {pln_to_uah:,.2f} –≥—Ä–Ω"
        bot.send_message(message.chat.id, text)
    except Exception as e:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å –≤–∞–ª—é—Ç.")
        print(f"–ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—é—Ç: {e}")

# --- –í–∏–±—ñ—Ä –∫—Ä–∏–ø—Ç–∏ ---
def send_crypto_options(message):
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton("‚Çø BTC", callback_data="BTC"),
        InlineKeyboardButton("ETH", callback_data="ETH"),
        InlineKeyboardButton("USDT", callback_data="USDT")
    )
    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É:", reply_markup=markup)

def send_single_crypto(message, crypto):
    try:
        params = {'ids':'bitcoin,ethereum,tether','vs_currencies':'usd,uah'}
        response = requests.get(CRYPTO_API_URL, params=params)
        data = response.json()
        if crypto == "BTC":
            text = f"‚Çø BTC: {data['bitcoin']['usd']:,.2f} $ / {data['bitcoin']['uah']:,.0f} –≥—Ä–Ω"
        elif crypto == "ETH":
            text = f"ETH: {data['ethereum']['usd']:,.2f} $ / {data['ethereum']['uah']:,.0f} –≥—Ä–Ω"
        elif crypto == "USDT":
            text = f"USDT: {data['tether']['usd']:,.2f} $ / {data['tether']['uah']:,.2f} –≥—Ä–Ω"
        bot.send_message(message.chat.id, text)
    except Exception as e:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏.")
        print(f"–ü–æ–º–∏–ª–∫–∞ –∫—Ä–∏–ø—Ç–∏: {e}")

# --- –¶—ñ–Ω–∏ –Ω–∞ –ø–∞–ª—å–Ω–µ ---
def send_fuel_prices(message):
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton("–ë–µ–Ω–∑–∏–Ω", callback_data="–ë–µ–Ω–∑–∏–Ω"),
        InlineKeyboardButton("–î–∏–∑–µ–ª—å", callback_data="–î–∏–∑–µ–ª—å"),
        InlineKeyboardButton("–ì–∞–∑", callback_data="–ì–∞–∑")
    )
    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –≤–∏–¥ –ø–∞–ª–∏–≤–∞:", reply_markup=markup)

def send_single_fuel(message, fuel_type):
    price = FUEL_PRICES.get(fuel_type)
    if price:
        bot.send_message(message.chat.id, f"{fuel_type}: {price:,.2f} –≥—Ä–Ω/–ª")
    else:
        bot.send_message(message.chat.id, "–¶—ñ–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")

# --- Webhook endpoint –¥–ª—è Telegram ---
@app.route('/webhook', methods=['POST'])
def webhook():
    json_str = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return '', 200

# --- –¢–µ—Å—Ç–æ–≤–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ ---
@app.route("/", methods=['GET'])
def index():
    return "Bot is running via Webhook on Render!", 200

# --- –ó–∞–ø—É—Å–∫ Flask ---
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
