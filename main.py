import os
import re
import logging
import requests
from flask import Flask, request
import telebot
from telebot import types
from bs4 import BeautifulSoup

# ---------- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è ----------
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")

# ---------- –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ ----------
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    logging.error("BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞. –î–æ–¥–∞–π—Ç–µ BOT_TOKEN —É Render Environment.")
    raise SystemExit("BOT_TOKEN not set")

# –î–ª—è Render: –Ω–∞–º–∞–≥–∞—î–º–æ—Å—å –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–æ–≤–Ω—ñ—à–Ω—ñ–π URL (Render –¥–∞—î RENDER_EXTERNAL_URL –∞–±–æ RENDER_EXTERNAL_HOSTNAME)
RENDER_EXTERNAL_URL = os.getenv("RENDER_EXTERNAL_URL") or (f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}" if os.getenv('RENDER_EXTERNAL_HOSTNAME') else None)

# ---------- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è ----------
bot = telebot.TeleBot(BOT_TOKEN, threaded=True)
app = Flask(__name__)

# ---------- HTTP headers ----------
DEFAULT_HEADERS = {
    "User-Agent": "Mozilla/5.0 (compatible; ExchangeBot/1.0; +https://example.com)"
}

# ---------- –§—É–Ω–∫—Ü—ñ—ó: –í–∞–ª—é—Ç–∏ (–ù–ë–£) ----------
def get_nbu_rates():
    """–ü–æ–≤–µ—Ä—Ç–∞—î dict {'USD': rate, 'EUR': rate, 'PLN': rate} –∞–±–æ None –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ"""
    try:
        url = "https://bank.gov.ua/NBUStatService/v1/statdirectory/exchange?json"
        r = requests.get(url, timeout=8, headers=DEFAULT_HEADERS)
        r.raise_for_status()
        data = r.json()
        result = {}
        for cur in ("USD", "EUR", "PLN"):
            item = next((x for x in data if x.get("cc") == cur), None)
            if item and "rate" in item:
                result[cur] = float(item["rate"])
            else:
                logging.warning(f"–ù–ë–£: –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –∫—É—Ä—Å –¥–ª—è {cur}")
                result[cur] = None
        return result
    except Exception as e:
        logging.exception("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫—É—Ä—Å—ñ–≤ –ù–ë–£")
        return None

# ---------- –§—É–Ω–∫—Ü—ñ—ó: –¢–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç (CoinGecko) ----------
def get_top10_crypto():
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ —Ä—è–¥–∫—ñ–≤ –∑ —Ç–æ–ø-10 –∫—Ä–∏–ø—Ç–æ (—Å–∏–º–≤–æ–ª, —Ü—ñ–Ω–∞ usd, –∑–º—ñ–Ω–∞ 24h)"""
    try:
        url = "https://api.coingecko.com/api/v3/coins/markets"
        params = {"vs_currency": "usd", "order": "market_cap_desc", "per_page": 10, "page": 1, "price_change_percentage": "24h"}
        r = requests.get(url, params=params, timeout=10, headers=DEFAULT_HEADERS)
        r.raise_for_status()
        data = r.json()
        lines = []
        for coin in data:
            sym = coin.get("symbol", "").upper()
            name = coin.get("name", "")
            price = coin.get("current_price")
            change = coin.get("price_change_percentage_24h")
            market_cap = coin.get("market_cap")
            if price is None:
                continue
            line = f"{sym} ({name}) ‚Äî ${price:,.2f}"
            if change is not None:
                line += f" ({change:+.2f}% 24h)"
            if market_cap:
                line += f" | MCap ${market_cap:,.0f}"
            lines.append(line)
        return lines
    except Exception as e:
        logging.exception("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—Ä–∏–ø—Ç–∏ –∑ CoinGecko")
        return None

# ---------- –§—É–Ω–∫—Ü—ñ—ó: –¶—ñ–Ω–∏ –ø–∞–ª—å–Ω–æ–≥–æ –û–ö–ö–û –∑ Minfin (scraping) ----------
def get_okko_fuel_prices():
    """
    –ü–∞—Ä—Å–∏—Ç—å Minfin index —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–ª—è –û–ö–ö–û.
    –ü–æ–≤–µ—Ä—Ç–∞—î dict { 'A95': price, 'A92': price, '–î–∏–∑–µ–ª—å': price, ... } –∞–±–æ None –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ.
    """
    url = "https://index.minfin.com.ua/ua/markets/fuel/tm/okko/"
    try:
        r = requests.get(url, timeout=10, headers=DEFAULT_HEADERS)
        r.raise_for_status()
        soup = BeautifulSoup(r.text, "lxml")

        # –®—É–∫–∞—î–º–æ —Ç–∞–±–ª–∏—Ü—é ‚Äî —Ä–æ–±–∏–º–æ –≥–Ω—É—á–∫–∏–π –ø–æ—à—É–∫
        table = soup.select_one("table") or soup.find("table")
        if not table:
            logging.warning("Minfin: —Ç–∞–±–ª–∏—Ü—è —Ü—ñ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
            return None

        prices = {}
        rows = table.select("tr")
        for row in rows:
            cols = row.select("td")
            if len(cols) >= 2:
                name = cols[0].get_text(strip=True)
                price_text = cols[1].get_text(strip=True)
                # –í–∏—Ç—è–≥–∞—î–º–æ —á–∏—Å–ª–æ (–Ω–∞ –≤–∏–ø–∞–¥–æ–∫ –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç—É)
                m = re.search(r"[\d\.,]+", price_text)
                if not m:
                    continue
                raw = m.group(0).replace(",", ".")
                try:
                    val = float(raw)
                except:
                    continue
                # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –Ω–∞–∑–≤—É
                name_norm = name.replace("\xa0", " ").strip()
                prices[name_norm] = val
        if not prices:
            logging.warning("Minfin: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ—ó —Ü—ñ–Ω–∏ –ø—ñ—Å–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É")
            return None
        return prices
    except Exception:
        logging.exception("–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É Minfin –¥–ª—è –û–ö–ö–û")
        return None

# ---------- –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ----------
def format_currency_message(rates: dict):
    if not rates:
        return "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å–∏ –≤–∞–ª—é—Ç."
    lines = ["üí± **–ö—É—Ä—Å–∏ (–ù–ë–£)**"]
    for cur in ("USD", "EUR", "PLN"):
        rate = rates.get(cur)
        if rate is None:
            lines.append(f"{cur}: N/A")
        else:
            lines.append(f"{cur}: {rate:,.2f} –≥—Ä–Ω")
    return "\n".join(lines)

def format_crypto_message(lines):
    if not lines:
        return "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º."
    header = "üî• **–¢–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç (–∑–∞ –∫–∞–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—î—é)**\n"
    return header + "\n".join(lines)

def format_fuel_message(prices: dict):
    if not prices:
        return "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω–∏ –ø–∞–ª—å–Ω–æ–≥–æ."
    lines = ["‚õΩ **–¶—ñ–Ω–∏ –û–ö–ö–û (Minfin)**"]
    # –°–æ—Ä—Ç—É—î–º–æ –ø–æ–ø—É–ª—è—Ä–Ω—ñ –ø–∞–ª—å–Ω—ñ —É –ø–æ—Ç—Ä—ñ–±–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É, —è–∫—â–æ —î
    preferred = ["A-95", "A-95+","A-92","–î–∏–∑–µ–ª—å","–ì–∞–∑","A95","A95+"]
    for k in preferred:
        if k in prices:
            lines.append(f"{k}: {prices[k]:,.2f} –≥—Ä–Ω/–ª")
    # –î–æ–¥–∞—î–º–æ —ñ–Ω—à—ñ
    for name, val in prices.items():
        if name in preferred:
            continue
        lines.append(f"{name}: {val:,.2f} –≥—Ä–Ω/–ª")
    return "\n".join(lines)

# ---------- –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ / –º–µ–Ω—é ----------
def main_menu():
    markup = types.InlineKeyboardMarkup(row_width=3)
    markup.add(
        types.InlineKeyboardButton("üíµ –í–∞–ª—é—Ç–∏", callback_data="menu_currency"),
        types.InlineKeyboardButton("üî• –ö—Ä–∏–ø—Ç–æ", callback_data="menu_crypto"),
        types.InlineKeyboardButton("‚õΩ –ü–∞–ª—å–Ω–µ", callback_data="menu_fuel"),
    )
    return markup

def currency_buttons():
    markup = types.InlineKeyboardMarkup(row_width=3)
    markup.add(
        types.InlineKeyboardButton("USD", callback_data="cur_USD"),
        types.InlineKeyboardButton("EUR", callback_data="cur_EUR"),
        types.InlineKeyboardButton("PLN", callback_data="cur_PLN"),
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_back")
    )
    return markup

def crypto_buttons():
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("–¢–æ–ø-10 (—Å–ø–∏—Å–æ–∫)", callback_data="crypto_top10"),
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_back")
    )
    return markup

def fuel_buttons():
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—ñ–Ω–∏ –û–ö–ö–û", callback_data="fuel_okko"),
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_back")
    )
    return markup

# ---------- –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ----------
@bot.message_handler(commands=["start", "help"])
def cmd_start(msg):
    txt = "–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –Ω–∏–∂—á–µ:"
    bot.send_message(msg.chat.id, txt, reply_markup=main_menu())

# ---------- Callback handler ----------
@bot.callback_query_handler(func=lambda c: True)
def callback_handler(call):
    data = call.data
    chat_id = call.message.chat.id

    if data == "menu_currency":
        bot.send_message(chat_id, "–û–±—Ä–∞—Ç–∏ –≤–∞–ª—é—Ç—É:", reply_markup=currency_buttons())

    elif data.startswith("cur_"):
        code = data.split("_", 1)[1]
        rates = get_nbu_rates()
        if not rates:
            bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        else:
            r = rates.get(code)
            if r is None:
                bot.send_message(chat_id, f"{code}: N/A")
            else:
                bot.send_message(chat_id, f"{code} ‚Üí UAH: {r:,.2f} –≥—Ä–Ω")
        # –Ω–µ –∑–∞–∫—Ä–∏–≤–∞—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ

    elif data == "menu_crypto":
        bot.send_message(chat_id, "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞:", reply_markup=crypto_buttons())

    elif data == "crypto_top10":
        crypto = get_top10_crypto()
        if not crypto:
            bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.")
        else:
            # —Ä–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏ —â–æ–± –Ω–µ –ø–µ—Ä–µ–≤–∏—â–∏—Ç–∏ –ª—ñ–º—ñ—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            text = format_crypto_message(crypto)
            bot.send_message(chat_id, text, parse_mode="Markdown")
    
    elif data == "menu_fuel":
        bot.send_message(chat_id, "–ü–∞–ª—å–Ω–µ:", reply_markup=fuel_buttons())

    elif data == "fuel_okko":
        prices = get_okko_fuel_prices()
        if not prices:
            bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω–∏ –Ω–∞ –ø–∞–ª—å–Ω–µ.")
        else:
            bot.send_message(chat_id, format_fuel_message(prices), parse_mode="Markdown")

    elif data == "menu_back":
        bot.send_message(chat_id, "–ü–æ–≤–µ—Ä—Ç–∞—é –≤ –º–µ–Ω—é", reply_markup=main_menu())

    else:
        bot.send_message(chat_id, f"–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞: {data}")

# ---------- Webhook endpoint ----------
@app.route("/webhook", methods=["POST"])
def webhook():
    try:
        json_str = request.get_data().decode("utf-8")
        update = telebot.types.Update.de_json(json_str)
        bot.process_new_updates([update])
    except Exception:
        logging.exception("–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ webhook")
    return "", 200

@app.route("/", methods=["GET"])
def index():
    return "Bot is running ‚úÖ", 200

# ---------- –ó–∞–ø—É—Å–∫ (–≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ webhook –ª–∏—à–µ —è–∫—â–æ –∑–Ω–∞–π—à–ª–∏ URL) ----------
if __name__ == "__main__":
    # –°—Ç–∞–≤–∏–º–æ webhook —Ç—ñ–ª—å–∫–∏ –∫–æ–ª–∏ Render –Ω–∞–¥–∞—î –∑–æ–≤–Ω—ñ—à–Ω—ñ–π URL
    try:
        bot.remove_webhook()
    except Exception:
        logging.warning("remove_webhook() –≤–∏–∫–ª–∏–∫–∞–ª–æ –ø–æ–º–∏–ª–∫—É (—ñ–≥–Ω–æ—Ä—É—î–º–æ)")

    if RENDER_EXTERNAL_URL:
        WEBHOOK_URL = f"{RENDER_EXTERNAL_URL}/webhook"
        try:
            bot.set_webhook(url=WEBHOOK_URL)
            logging.info(f"Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {WEBHOOK_URL}")
        except Exception:
            logging.exception("–ù–µ –≤–¥–∞–ª–æ—Å—å –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ webhook")
    else:
        logging.warning("RENDER_EXTERNAL_URL / RENDER_EXTERNAL_HOSTNAME –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ ‚Äî webhook –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ Background Worker –∞–±–æ –∑–∞–¥–∞–π—Ç–µ URL –≤—Ä—É—á–Ω—É.")

    port = int(os.getenv("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
