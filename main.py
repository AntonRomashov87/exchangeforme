import os
import telebot
import requests
from flask import Flask, request

# --- –¢–æ–∫–µ–Ω –±–æ—Ç–∞ ---
BOT_TOKEN = '8008617718:AAHYtH1YadkHebM2r8MQrMnRadYLTXdf4WQ'

# --- API –¥–ª—è –≤–∞–ª—é—Ç ---
EXCHANGE_API_URL = "https://api.exchangerate.host/latest?base=USD&symbols=UAH,EUR,PLN"

# CoinGecko API –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏
CRYPTO_API_URL = "https://api.coingecko.com/api/v3/simple/price"

# API –¥–ª—è –ø–∞–ª—å–Ω–æ–≥–æ (–ø—Ä–∏–∫–ª–∞–¥, –º–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∏–π)
FUEL_API_URL = "https://api.collectapi.com/gasPrice/ukraineCityPrice"

# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ Flask ---
bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

# --- –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–∏–π webhook —ñ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –Ω–æ–≤–∏–π ---
bot.remove_webhook()
print("–°—Ç–∞—Ä–∏–π webhook –≤–∏–¥–∞–ª–µ–Ω–æ")

WEBHOOK_URL = f"{os.environ.get('RENDER_EXTERNAL_URL')}/webhook"
bot.set_webhook(url=WEBHOOK_URL)
print(f"–ù–æ–≤–∏–π webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {WEBHOOK_URL}")

# --- –ö–æ–º–∞–Ω–¥–∏ /start —Ç–∞ /help ---
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    welcome_text = (
        "–ü—Ä–∏–≤—ñ—Ç! üëã –Ø –±–æ—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫—É—Ä—Å—ñ–≤ –≤–∞–ª—é—Ç, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏ —Ç–∞ —Ü—ñ–Ω –Ω–∞ –ø–∞–ª—å–Ω–µ.\n"
        "–ö–æ–º–∞–Ω–¥–∏:\n"
        "üí∞ /exchange - –∫—É—Ä—Å –≤–∞–ª—é—Ç (USD, EUR, PLN ‚Üí UAH)\n"
        "‚Çø /crypto - —Ü—ñ–Ω–∏ BTC, ETH, USDT\n"
        "‚Çø /crypto10 - —Ç–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç (USD, UAH)\n"
        "‚õΩ /fuel - —Ü—ñ–Ω–∏ –Ω–∞ –ø–∞–ª—å–Ω–µ (–¥–∏–∑–µ–ª—å, –±–µ–Ω–∑–∏–Ω, –≥–∞–∑)\n"
        "üí° /help - —Ü—è –¥–æ–≤—ñ–¥–∫–∞"
    )
    bot.reply_to(message, welcome_text)

# --- –ö—É—Ä—Å –≤–∞–ª—é—Ç ---
@bot.message_handler(commands=['exchange'])
def get_exchange_rates(message):
    try:
        response = requests.get(EXCHANGE_API_URL)
        data = response.json()

        usd_to_uah = data['rates']['UAH']
        eur_to_uah = usd_to_uah / data['rates']['EUR']
        pln_to_uah = usd_to_uah / data['rates']['PLN']

        exchange_text = (
            f"üí∞ **–ö—É—Ä—Å –≤–∞–ª—é—Ç (–¥–æ UAH)**:\n"
            f"üá∫üá∏ USD: {usd_to_uah:,.2f} –≥—Ä–Ω\n"
            f"üá™üá∫ EUR: {eur_to_uah:,.2f} –≥—Ä–Ω\n"
            f"üáµüá± PLN: {pln_to_uah:,.2f} –≥—Ä–Ω"
        )
        bot.reply_to(message, exchange_text, parse_mode='Markdown')
    except Exception as e:
        bot.reply_to(message, "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å –≤–∞–ª—é—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        print(f"–ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—é—Ç: {e}")

# --- –¶—ñ–Ω–∏ –Ω–∞ 3 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏ ---
@bot.message_handler(commands=['crypto'])
def get_crypto_prices(message):
    try:
        params = {'ids':'bitcoin,ethereum,tether','vs_currencies':'usd,uah'}
        response = requests.get(CRYPTO_API_URL, params=params)
        data = response.json()

        btc_usd, btc_uah = data['bitcoin']['usd'], data['bitcoin']['uah']
        eth_usd, eth_uah = data['ethereum']['usd'], data['ethereum']['uah']
        usdt_usd, usdt_uah = data['tether']['usd'], data['tether']['uah']

        crypto_text = (
            f"‚Çø **–¶—ñ–Ω–∏ –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É**:\n\n"
            f"üìä BTC: {btc_usd:,.2f} $ / {btc_uah:,.0f} –≥—Ä–Ω\n"
            f"üìä ETH: {eth_usd:,.2f} $ / {eth_uah:,.0f} –≥—Ä–Ω\n"
            f"üìä USDT: {usdt_usd:,.2f} $ / {usdt_uah:,.2f} –≥—Ä–Ω"
        )
        bot.reply_to(message, crypto_text, parse_mode='Markdown')
    except Exception as e:
        bot.reply_to(message, "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        print(f"–ü–æ–º–∏–ª–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏: {e}")

# --- –¢–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç ---
@bot.message_handler(commands=['crypto10'])
def get_top10_crypto(message):
    try:
        top10 = "bitcoin,ethereum,tether,binancecoin,usd-coin,ripple,cardano,solana,dogecoin,polkadot"
        params = {'ids': top10, 'vs_currencies':'usd,uah'}
        response = requests.get(CRYPTO_API_URL, params=params)
        data = response.json()

        text = "‚Çø **–¢–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç**:\n\n"
        for coin, prices in data.items():
            text += f"{coin.upper()}: {prices['usd']:.2f}$ / {prices['uah']:.0f} –≥—Ä–Ω\n"

        bot.reply_to(message, text, parse_mode='Markdown')
    except Exception as e:
        bot.reply_to(message, "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.")
        print(f"–ü–æ–º–∏–ª–∫–∞ —Ç–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {e}")

# --- –¶—ñ–Ω–∏ –Ω–∞ –ø–∞–ª—å–Ω–µ ---
@bot.message_handler(commands=['fuel'])
def get_fuel_prices(message):
    try:
        # –ü—Ä–∏–∫–ª–∞–¥ –∑ API collectapi.com (–ø–æ—Ç—Ä—ñ–±–µ–Ω –∫–ª—é—á)
        headers = {"Authorization": "apikey YOUR_COLLECTAPI_KEY"}
        response = requests.get(FUEL_API_URL, headers=headers)
        data = response.json()

        # –ü—Ä–∏–ø—É—Å—Ç–∏–º–æ, —É JSON —î fields: diesel, petrol, gas
        diesel = data['result']['diesel']
        petrol = data['result']['petrol']
        gas = data['result']['gas']

        fuel_text = (
            f"‚õΩ **–¶—ñ–Ω–∏ –Ω–∞ –ø–∞–ª—å–Ω–µ –≤ –£–∫—Ä–∞—ó–Ω—ñ**:\n"
            f"üõ¢ –î–∏–∑–µ–ª—å: {diesel} –≥—Ä–Ω/–ª\n"
            f"‚õΩ –ë–µ–Ω–∑–∏–Ω: {petrol} –≥—Ä–Ω/–ª\n"
            f"üí® –ì–∞–∑: {gas} –≥—Ä–Ω/–ª"
        )
        bot.reply_to(message, fuel_text)
    except Exception as e:
        bot.reply_to(message, "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω–∏ –Ω–∞ –ø–∞–ª—å–Ω–µ.")
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø–∞–ª—å–Ω–æ–≥–æ: {e}")

# --- Webhook endpoint –¥–ª—è Telegram ---
@app.route('/webhook', methods=['POST'])
def webhook():
    json_str = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return '', 200

# --- –¢–µ—Å—Ç–æ–≤–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ ---
@app.route("/", methods=['GET'])
def index():
    return "Bot is running via Webhook on Render!", 200

# --- –ó–∞–ø—É—Å–∫ Flask ---
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
