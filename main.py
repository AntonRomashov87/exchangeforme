# =======================
# –Ü–º–ø–æ—Ä—Ç–∏ –±—ñ–±–ª—ñ–æ—Ç–µ–∫
# =======================
import os  # –î–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è (—Å–µ–∫—Ä–µ—Ç–Ω–∏–π —Ç–æ–∫–µ–Ω)
import requests # –î–ª—è HTTP-–∑–∞–ø–∏—Ç—ñ–≤ –¥–æ API
import logging # –î–ª—è –∑–∞–ø–∏—Å—É –ª–æ–≥—ñ–≤ –ø—Ä–æ –ø–æ–º–∏–ª–∫–∏ —Ç–∞ —Ä–æ–±–æ—Ç—É –±–æ—Ç–∞
from flask import Flask, request # –î–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ (webhook)
import telebot # –û—Å–Ω–æ–≤–Ω–∞ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Telegram Bot API
from telebot import types

# =======================
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è —Ç–∞ –±–∞–∑–æ–≤—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
# =======================

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è, —â–æ–± –±–∞—á–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ä–æ–±–æ—Ç—É —Ç–∞ –ø–æ–º–∏–ª–∫–∏ –≤ –ª–æ–≥–∞—Ö Render
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# --- –ë–µ–∑–ø–µ–∫–∞: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –∑—ñ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è ---
# –ü–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –≤–∞—à–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É –Ω–∞ Render -> Environment
# –°—Ç–≤–æ—Ä—ñ—Ç—å –∑–º—ñ–Ω–Ω—É –∑ –Ω–∞–∑–≤–æ—é BOT_TOKEN —ñ –≤—Å—Ç–∞–≤—Ç–µ —Ç—É–¥–∏ –≤–∞—à —Ç–æ–∫–µ–Ω.
BOT_TOKEN = os.getenv("BOT_TOKEN")

# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è ---
if not BOT_TOKEN:
    logging.critical("–ü–û–ú–ò–õ–ö–ê –ó–ê–ü–£–°–ö–£: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–º—ñ–Ω–Ω—É –æ—Ç–æ—á–µ–Ω–Ω—è BOT_TOKEN!")
    # –Ø–∫—â–æ —Ç–æ–∫–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –±–æ—Ç –Ω–µ –∑–º–æ–∂–µ –∑–∞–ø—É—Å—Ç–∏—Ç–∏—Å—è.

bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

# =======================
# –ë–ª–æ–∫ 1: –§—É–Ω–∫—Ü—ñ—ó –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ API
# =======================

def get_exchange_rates():
    """
    –û—Ç—Ä–∏–º—É—î –∫—É—Ä—Å–∏ –≤–∞–ª—é—Ç (USD, EUR, PLN) –∑ API –ù–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ–≥–æ –±–∞–Ω–∫—É –£–∫—Ä–∞—ó–Ω–∏.
    –í–∫–ª—é—á–∞—î –æ–±—Ä–æ–±–∫—É –ø–æ–º–∏–ª–æ–∫ —Ç–∞–π–º–∞—É—Ç—É —Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ JSON.
    """
    url = "https://bank.gov.ua/NBUStatService/v1/statdirectory/exchange?json"
    try:
        response = requests.get(url, timeout=10)
        # –ì–µ–Ω–µ—Ä—É—î –≤–∏–Ω—è—Ç–æ–∫, —è–∫—â–æ —Å–µ—Ä–≤–µ—Ä –≤—ñ–¥–ø–æ–≤—ñ–≤ –ø–æ–º–∏–ª–∫–æ—é (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 500, 404)
        response.raise_for_status() 
        data = response.json()
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ –∫—É—Ä—Å—ñ–≤ –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ
        rates = {item['cc']: item['rate'] for item in data if item['cc'] in ["USD", "EUR", "PLN"]}
        
        # –§–æ—Ä–º—É—î–º–æ —Ä—è–¥–æ–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ .get() –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É.
        usd_rate = rates.get("USD", 0)
        eur_rate = rates.get("EUR", 0)
        pln_rate = rates.get("PLN", 0)

        if not all([usd_rate, eur_rate, pln_rate]):
             logging.warning("API –ù–ë–£ –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–ª–æ –æ–¥–Ω—É –∑ –≤–∞–ª—é—Ç (USD/EUR/PLN).")
             return "‚ö†Ô∏è –ß–∞—Å—Ç–∏–Ω–∞ –¥–∞–Ω–∏—Ö –ø—Ä–æ –≤–∞–ª—é—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."

        result = f"–ö—É—Ä—Å –ù–ë–£:\n" \
                 f"üíµ USD: {usd_rate:.2f} ‚Ç¥\n" \
                 f"üí∂ EUR: {eur_rate:.2f} ‚Ç¥\n" \
                 f"üáµüá± PLN: {pln_rate:.2f} ‚Ç¥"
        return result

    except requests.exceptions.Timeout:
        logging.warning("NBU API request timed out.")
        return "‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –ù–ë–£ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î. –°–ø—Ä–æ–±—É–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–∞ —Ö–≤–∏–ª–∏–Ω—É."
    except requests.exceptions.RequestException as e:
        logging.error(f"Network error while getting exchange rates: {e}")
        return "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫—É—Ä—Å—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
    except Exception as e:
        logging.error(f"Unhandled error in get_exchange_rates: {e}")
        return "‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –í–∂–µ –ø—Ä–∞—Ü—é—î–º–æ –Ω–∞–¥ –≤–∏—Ä—ñ—à–µ–Ω–Ω—è–º."

def get_crypto():
    """
    –û—Ç—Ä–∏–º—É—î —Ç–æ–ø-5 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∑ API CoinGecko.
    """
    url = "https://api.coingecko.com/api/v3/coins/markets"
    params = {"vs_currency": "usd", "order": "market_cap_desc", "per_page": 5, "page": 1}
    try:
        response = requests.get(url, params=params, timeout=10)
        response.raise_for_status()
        data = response.json()
        
        result = "‚Çø –¢–æ–ø-5 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç (–∑–∞ –¥–∞–Ω–∏–º–∏ CoinGecko):\n"
        for i, coin in enumerate(data):
            symbol = coin.get('symbol', 'N/A').upper()
            price = coin.get('current_price', 0)
            result += f"{i+1}. {symbol}: ${price:,.2f}\n" # –î–æ–¥–∞–Ω–æ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–∏—Å—è—á
        return result
        
    except requests.exceptions.RequestException as e:
        logging.error(f"CoinGecko API request error: {e}")
        return "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
    except Exception as e:
        logging.error(f"Unhandled error in get_crypto: {e}")
        return "‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞."

def get_fuel_prices():
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î —Å—Ç–∞—Ç–∏—á–Ω—ñ —Ü—ñ–Ω–∏ –Ω–∞ –ø–∞–ª—å–Ω–µ. 
    –¶–µ –Ω–∞–¥—ñ–π–Ω–∏–π –º–µ—Ç–æ–¥, –æ—Å–∫—ñ–ª—å–∫–∏ –Ω–µ –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö API, 
    —è–∫—ñ –º–æ–∂—É—Ç—å —á–∞—Å—Ç–æ –∑–º—ñ–Ω—é–≤–∞—Ç–∏—Å—è –∞–±–æ –±–ª–æ–∫—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Ç–∏.
    """
    # –î–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ü—ñ–Ω –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∑–º—ñ–Ω–∏—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è —Ç—É—Ç —ñ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–æ–¥ –Ω–∞ Render.
    fuel_data = {
        "‚õΩ A-95+": 59.99,
        "‚õΩ A-95": 57.49,
        "‚õΩ –î–ü": 55.99,
    }
    result = "‚õΩ –û—Ä—ñ—î–Ω—Ç–æ–≤–Ω—ñ —Ü—ñ–Ω–∏ –Ω–∞ –ø–∞–ª—å–Ω–µ:\n"
    for fuel_type, price in fuel_data.items():
        result += f"{fuel_type}: {price:.2f} ‚Ç¥\n"
    return result

# =======================
# –ë–ª–æ–∫ 2: –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram
# =======================

@bot.message_handler(commands=["start", "help"])
def send_welcome(message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start. –°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É."""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton("üíµ –í–∞–ª—é—Ç–∏")
    btn2 = types.KeyboardButton("‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞")
    btn3 = types.KeyboardButton("‚õΩ –ü–∞–ª—å–Ω–µ")
    markup.add(btn1, btn2, btn3)
    
    welcome_text = "–ü—Ä–∏–≤—ñ—Ç üëã\n–Ø –¥–æ–ø–æ–º–æ–∂—É –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –∞–∫—Ç—É–∞–ª—å–Ω—ñ –∫—É—Ä—Å–∏.\n–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:"
    bot.send_message(message.chat.id, welcome_text, reply_markup=markup)

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ —Ç–∞ —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."""
    chat_id = message.chat.id
    
    if message.text == "üíµ –í–∞–ª—é—Ç–∏":
        # –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è: –º–∏—Ç—Ç—î–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å + —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
        msg = bot.send_message(chat_id, "‚è≥ –û—Ç—Ä–∏–º—É—é –∞–∫—Ç—É–∞–ª—å–Ω—ñ –∫—É—Ä—Å–∏ –≤—ñ–¥ –ù–ë–£...")
        rates_text = get_exchange_rates()
        bot.edit_message_text(rates_text, chat_id, msg.message_id)

    elif message.text == "‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞":
        # –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è: –º–∏—Ç—Ç—î–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å + —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
        msg = bot.send_message(chat_id, "‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –¥–∞–Ω—ñ –∑ –±—ñ—Ä–∂...")
        crypto_text = get_crypto()
        bot.edit_message_text(crypto_text, chat_id, msg.message_id)

    elif message.text == "‚õΩ –ü–∞–ª—å–Ω–µ":
        # –ó–∞–ø–∏—Ç –º–∏—Ç—Ç—î–≤–∏–π (—Å—Ç–∞—Ç–∏—á–Ω—ñ –¥–∞–Ω—ñ), —Ç–æ–º—É —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–µ
        bot.send_message(chat_id, get_fuel_prices())
        
    else:
        bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –æ–ø—Ü—ñ–π —É –º–µ–Ω—é –Ω–∏–∂—á–µ.")

# =======================
# –ë–ª–æ–∫ 3: Flask Webhook –¥–ª—è Render
# =======================

@app.route("/", methods=["GET"])
def index():
    """–°—Ç–æ—Ä—ñ–Ω–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞–Ω—É (health check) —Å–µ—Ä–≤—ñ—Å–æ–º Render."""
    return "Bot server is alive and running!", 200

@app.route("/webhook", methods=["POST"])
def webhook():
    """–ü—Ä–∏–π–º–∞—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è (–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤) –≤—ñ–¥ Telegram."""
    if request.headers.get('content-type') == 'application/json':
        json_str = request.get_data().decode("UTF-8")
        update = telebot.types.Update.de_json(json_str)
        bot.process_new_updates([update])
        return "ok", 200
    else:
        return "Unsupported Media Type", 415

# –ü—Ä–∏–º—ñ—Ç–∫–∞: –ë–ª–æ–∫ `if __name__ == "__main__":` –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω, 
# –æ—Å–∫—ñ–ª—å–∫–∏ Render –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î Gunicorn –¥–ª—è –∑–∞–ø—É—Å–∫—É `app`.
