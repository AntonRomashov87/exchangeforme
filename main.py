import os
import telebot
import requests
from flask import Flask, request

# =======================
# Flask
# =======================
app = Flask(__name__)

# --- –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∑ Render Environment Variables ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    print("‚ùå BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π. –ë—É–¥—å –ª–∞—Å–∫–∞, –¥–æ–¥–∞–π—Ç–µ –π–æ–≥–æ –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö Render ‚Üí Environment.")
    exit()

bot = telebot.TeleBot(BOT_TOKEN, parse_mode="Markdown")

# --- API –¥–ª—è –≤–∞–ª—é—Ç ---
# –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ NBU API, —è–∫–∏–π —î –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–º —Ç–∞ –Ω–∞–¥—ñ–π–Ω–∏–º
EXCHANGE_API_URL = "https://bank.gov.ua/NBUStatService/v1/statdirectory/exchange?json"

# --- API –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏ ---
CRYPTO_API_URL = "https://api.coingecko.com/api/v3/coins/markets"

# --- API –¥–ª—è –º–µ—Ç–∞–ª—ñ–≤ (XAU ‚Äì –∑–æ–ª–æ—Ç–æ, XAG ‚Äì —Å—Ä—ñ–±–ª–æ, XPT ‚Äì –ø–ª–∞—Ç–∏–Ω–∞) ---
# Metals.live API —î –ø–ª–∞—Ç–Ω–∏–º. –¶–µ –ª–∏—à–µ –ø—Ä–∏–∫–ª–∞–¥.
METALS_API_URL = "https://api.metals.live/v1/spot"

# --- API –¥–ª—è –ø–∞–ª—å–Ω–æ–≥–æ (—Ñ—ñ–∫—Å–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ —è–∫ –ø—Ä–∏–∫–ª–∞–¥) ---
def get_fuel_prices_data():
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Ñ—ñ–∫—Å–æ–≤–∞–Ω—ñ —Ü—ñ–Ω–∏ –Ω–∞ –ø–∞–ª—å–Ω–µ (—è–∫ –ø—Ä–∏–∫–ª–∞–¥, –∞–¥–∞–ø—Ç–æ–≤–∞–Ω–∏–π –ø—ñ–¥ –£–∫—Ä–∞—ó–Ω—É)"""
    return {
        "–î–∏–∑–µ–ª—å": 56.50,
        "–ê-95": 57.80,
        "–ê-92": 55.20
    }

# =======================
# Webhook URL
# =======================
WEBHOOK_URL = f"{os.getenv('RENDER_EXTERNAL_URL')}/webhook"

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@bot.message_handler(commands=["start", "help"])
def start(message):
    bot.reply_to(
        message,
        "–ü—Ä–∏–≤—ñ—Ç! üëã –Ø –±–æ—Ç –Ω–∞ Render Free.\n\n"
        "–ö–æ–º–∞–Ω–¥–∏:\n"
        "üí∞ /exchange ‚Äî –∫—É—Ä—Å –≤–∞–ª—é—Ç\n"
        "‚Çø /crypto ‚Äî —Ç–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n"
        "ü•á /metals ‚Äî —Ü—ñ–Ω–∏ –Ω–∞ –º–µ—Ç–∞–ª–∏\n"
        "‚õΩ /fuel ‚Äî —Ü—ñ–Ω–∏ –Ω–∞ –±–µ–Ω–∑–∏–Ω —ñ –¥–∏–∑–µ–ª—å\n"
    )

# --- –ö—É—Ä—Å –≤–∞–ª—é—Ç ---
@bot.message_handler(commands=["exchange"])
def exchange(message):
    try:
        r = requests.get(EXCHANGE_API_URL).json()
        usd = next(item for item in r if item["cc"] == "USD")["rate"]
        eur = next(item for item in r if item["cc"] == "EUR")["rate"]
        pln = next(item for item in r if item["cc"] == "PLN")["rate"]

        text = (
            f"üí± **–ö—É—Ä—Å –≤–∞–ª—é—Ç (–¥–æ UAH)**\n\n"
            f"üá∫üá∏ USD: {usd:.2f}‚Ç¥\n"
            f"üá™üá∫ EUR: {eur:.2f}‚Ç¥\n"
            f"üáµüá± PLN: {pln:.2f}‚Ç¥"
        )
        bot.reply_to(message, text)
    except Exception as e:
        bot.reply_to(message, "‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫—É—Ä—Å—É –≤–∞–ª—é—Ç.")
        print(f"–ü–æ–º–∏–ª–∫–∞ –≤ exchange(): {e}")

# --- –¢–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç ---
@bot.message_handler(commands=["crypto"])
def crypto(message):
    try:
        params = {"vs_currency": "usd", "order": "market_cap_desc", "per_page": 10, "page": 1}
        data = requests.get(CRYPTO_API_URL, params=params).json()

        text = "‚Çø **–¢–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç**\n\n"
        for coin in data:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ .get() –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –¥–æ —Å–ª–æ–≤–Ω–∏–∫–∞
            price_change = coin.get('price_change_percentage_24h', 0)
            text += f"**{coin['market_cap_rank']}. {coin['symbol'].upper()}**: {coin['current_price']:.2f}$ (üíπ {price_change:.2f}%)\n"

        bot.reply_to(message, text, parse_mode='Markdown')
    except Exception as e:
        bot.reply_to(message, "‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –ø—Ä–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É.")
        print(f"–ü–æ–º–∏–ª–∫–∞ –≤ crypto(): {e}")

# --- –ú–µ—Ç–∞–ª–∏ ---
@bot.message_handler(commands=["metals"])
def metals(message):
    try:
        metals_data = requests.get(METALS_API_URL).json()
        # –û—Å–∫—ñ–ª—å–∫–∏ API –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ dict comprehension –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ
        metals_dict = {list(item.keys())[0]: list(item.values())[0] for item in metals_data}
        
        text = (
            f"ü•á **–ú–µ—Ç–∞–ª–∏ (USD/oz)**\n\n"
            f"–ó–æ–ª–æ—Ç–æ: {metals_dict.get('gold', 'N/A'):.2f}$\n"
            f"–°—Ä—ñ–±–ª–æ: {metals_dict.get('silver', 'N/A'):.2f}$\n"
            f"–ü–ª–∞—Ç–∏–Ω–∞: {metals_dict.get('platinum', 'N/A'):.2f}$\n"
            f"–ü–∞–ª–∞–¥—ñ–π: {metals_dict.get('palladium', 'N/A'):.2f}$"
        )
        bot.reply_to(message, text, parse_mode='Markdown')
    except Exception as e:
        bot.reply_to(message, "‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ü—ñ–Ω –Ω–∞ –º–µ—Ç–∞–ª–∏.")
        print(f"–ü–æ–º–∏–ª–∫–∞ –≤ metals(): {e}")

# --- –ü–∞–ª—å–Ω–µ ---
@bot.message_handler(commands=["fuel"])
def fuel(message):
    try:
        fuel_prices = get_fuel_prices_data()
        text = "‚õΩ **–¶—ñ–Ω–∏ –Ω–∞ –ø–∞–ª—å–Ω–µ (–ø—Ä–∏–∫–ª–∞–¥):**\n\n"
        for k, v in fuel_prices.items():
            text += f"**{k}**: {v:.2f}‚Ç¥\n"
        bot.reply_to(message, text, parse_mode='Markdown')
    except Exception as e:
        bot.reply_to(message, "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ü—ñ–Ω–∏ –Ω–∞ –ø–∞–ª—å–Ω–µ.")
        print(f"–ü–æ–º–∏–ª–∫–∞ –≤ fuel(): {e}")

# --- –û–±—Ä–æ–±–∫–∞ webhook ---
@app.route("/webhook", methods=["POST"])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        print(f"Received webhook payload: {json_string}")
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return '', 200
    else:
        return 'Invalid content type', 403

# --- –¢–µ—Å—Ç–æ–≤–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ ---
@app.route("/", methods=["GET"])
def index():
    return "–ë–æ—Ç –ø—Ä–∞—Ü—é—î —á–µ—Ä–µ–∑ Webhook –Ω–∞ Render Free!", 200

# --- Flask –∑–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    if WEBHOOK_URL and bot.remove_webhook() and bot.set_webhook(url=WEBHOOK_URL):
        try:
            bot.remove_webhook()
            bot.set_webhook(url=WEBHOOK_URL)
            print(f"‚úÖ Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {WEBHOOK_URL}")
        except telebot.apihelper.ApiTelegramException as e:
            print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ Webhook: {e}")
    else:
        print("‚ùå WEBHOOK_URL –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π. –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç –Ω–µ–º–æ–∂–ª–∏–≤–æ.")
    
    port = int(os.getenv("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
