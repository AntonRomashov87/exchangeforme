import requests
import os
import json
from flask import Flask, request
import telebot
from telebot import types

# =======================
# Telegram
# =======================
# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞. –¶–µ –±–µ–∑–ø–µ—á–Ω—ñ—à–µ!
BOT_TOKEN = os.getenv("BOT_TOKEN")
# –û—Ç—Ä–∏–º–∞–Ω–Ω—è URL –≤–µ–±—Ö—É–∫–∞ –∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

bot = telebot.TeleBot(BOT_TOKEN, parse_mode="Markdown")

# =======================
# Flask
# =======================
app = Flask(__name__)

# =======================
# –î–∞–Ω—ñ –¥–ª—è –≤–∞–ª—é—Ç–∏, –∫—Ä–∏–ø—Ç–∏ —Ç–∞ –ø–∞–ª—å–Ω–æ–≥–æ
# =======================
def get_exchange_rates():
    """–û—Ç—Ä–∏–º—É—î –∫—É—Ä—Å–∏ –≤–∞–ª—é—Ç –∑ API –ù–ë–£."""
    url = "https://bank.gov.ua/NBUStatService/v1/statdirectory/exchange?json"
    try:
        data = requests.get(url, timeout=5).json()
        usd = next(item for item in data if item["cc"] == "USD")["rate"]
        eur = next(item for item in data if item["cc"] == "EUR")["rate"]
        pln = next(item for item in data if item["cc"] == "PLN")["rate"]
        return f"üíµ **–ö—É—Ä—Å–∏ –≤–∞–ª—é—Ç (–¥–æ UAH)**:\nüá∫üá∏ USD: {usd:.2f}‚Ç¥\nüá™üá∫ EUR: {eur:.2f}‚Ç¥\nüáµüá± PLN: {pln:.2f}‚Ç¥"
    except Exception:
        return "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫—É—Ä—Å–∏ –≤–∞–ª—é—Ç."

def get_crypto():
    """–û—Ç—Ä–∏–º—É—î —Ç–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∑ CoinGecko."""
    url = "https://api.coingecko.com/api/v3/coins/markets"
    params = {"vs_currency": "usd", "order": "market_cap_desc", "per_page": 10, "page": 1}
    try:
        data = requests.get(url, params=params, timeout=5).json()
        result = "‚Çø **–¢–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç**:\n\n"
        for coin in data:
            result += f"{coin['market_cap_rank']}. {coin['symbol'].upper()}: {coin['current_price']:.2f}$\n"
        return result
    except Exception:
        return "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É."

def get_fuel_prices():
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Ñ—ñ–∫—Å–æ–≤–∞–Ω—ñ —Ü—ñ–Ω–∏ –Ω–∞ –ø–∞–ª—å–Ω–µ (–ø—Ä–∏–∫–ª–∞–¥)."""
    try:
        fuel_data = {
            "–î–∏–∑–µ–ª—å": 56.50,
            "–ê-95": 57.80,
            "–ê-92": 55.20
        }
        result = "‚õΩ **–¶—ñ–Ω–∏ –Ω–∞ –ø–∞–ª—å–Ω–µ (OKKO):**\n"
        for k, v in fuel_data.items():
            result += f"{k}: {v:.2f}‚Ç¥\n"
        return result
    except Exception:
        return "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ü—ñ–Ω–∏ –Ω–∞ –ø–∞–ª—å–Ω–µ."

# =======================
# –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
# =======================
@bot.message_handler(commands=["start", "help"])
def start(message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start. –°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É."""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üíµ –í–∞–ª—é—Ç–∏", "‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", "‚õΩ –ü–∞–ª—å–Ω–µ")
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤—ñ—Ç üëã\n–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=markup)

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏."""
    if message.text == "üíµ –í–∞–ª—é—Ç–∏":
        bot.send_message(message.chat.id, get_exchange_rates())
    elif message.text == "‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞":
        bot.send_message(message.chat.id, get_crypto())
    elif message.text == "‚õΩ –ü–∞–ª—å–Ω–µ":
        bot.send_message(message.chat.id, get_fuel_prices())
    else:
        bot.send_message(message.chat.id, "–í–∏–±–µ—Ä—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É –∑ –º–µ–Ω—é.")

# =======================
# Webhook
# =======================
@app.route("/webhook", methods=["POST"])
def webhook():
    """–û–±—Ä–æ–±–ª—è—î POST-–∑–∞–ø–∏—Ç–∏ –≤—ñ–¥ Telegram."""
    if request.headers.get("content-type") == "application/json":
        json_string = request.get_data().decode("utf-8")
        update = types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return "ok", 200
    return "Error", 400

@app.route("/", methods=["GET"])
def index():
    """–ü–æ–∫–∞–∑—É—î, —â–æ –±–æ—Ç –ø—Ä–∞—Ü—é—î."""
    return "–ë–æ—Ç –ø—Ä–∞—Ü—é—î ‚úÖ", 200

# =======================
# –ó–∞–ø—É—Å–∫
# =======================
if __name__ == "__main__":
    if BOT_TOKEN and WEBHOOK_URL:
        # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É
        bot.remove_webhook()
        bot.set_webhook(url=WEBHOOK_URL)
        print(f"Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {WEBHOOK_URL}")
        app.run(host="0.0.0.0", port=int(os.getenv("PORT", 5000)))
    else:
        print("BOT_TOKEN –∞–±–æ WEBHOOK_URL –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ. –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç –Ω–µ–º–æ–∂–ª–∏–≤–æ.")
