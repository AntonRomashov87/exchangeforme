import os
import telebot
import requests
from flask import Flask, request

# --- –¢–æ–∫–µ–Ω –±–æ—Ç–∞ ---
BOT_TOKEN = '8008617718:AAHYtH1YadkHebM2r8MQrMnRadYLTXdf4WQ'

# --- –í–∞—à –∫–ª—é—á OpenExchangeRates ---
EXCHANGE_API_KEY = 'YOUR_OPENEXCHANGERATES_API_KEY'
EXCHANGE_API_URL = f"https://openexchangerates.org/api/latest.json?app_id={EXCHANGE_API_KEY}&symbols=UAH,USD,EUR,PLN"

# CoinGecko API
CRYPTO_API_URL = "https://api.coingecko.com/api/v3/simple/price"

# Flask —Ç–∞ Telegram bot
bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

# --- –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–∏–π webhook ---
bot.remove_webhook()
print("–°—Ç–∞—Ä–∏–π webhook –≤–∏–¥–∞–ª–µ–Ω–æ")

# --- –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ webhook –¥–ª—è Render ---
WEBHOOK_URL = f"{os.environ.get('RENDER_EXTERNAL_URL')}/webhook"
bot.set_webhook(url=WEBHOOK_URL)
print(f"–ù–æ–≤–∏–π webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {WEBHOOK_URL}")

# --- –ö–æ–º–∞–Ω–¥–∏ /start —Ç–∞ /help ---
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    welcome_text = (
        "–ü—Ä–∏–≤—ñ—Ç! üëã –Ø –±–æ—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫—É—Ä—Å—ñ–≤ –≤–∞–ª—é—Ç —Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏.\n"
        "–ö–æ–º–∞–Ω–¥–∏:\n"
        "üí∞ /exchange - –∫—É—Ä—Å –≤–∞–ª—é—Ç (USD, EUR, PLN –¥–æ UAH)\n"
        "‚Çø /crypto - —Ü—ñ–Ω–∏ BTC, ETH, USDT\n"
        "üí° /help - —Ü—è –¥–æ–≤—ñ–¥–∫–∞"
    )
    bot.reply_to(message, welcome_text)

# --- –ö—É—Ä—Å –≤–∞–ª—é—Ç ---
@bot.message_handler(commands=['exchange'])
def get_exchange_rates(message):
    try:
        response = requests.get(EXCHANGE_API_URL)
        data = response.json()
        usd_to_base = data['rates']['UAH']
        eur_to_base = usd_to_base / data['rates']['EUR']
        pln_to_base = usd_to_base / data['rates']['PLN']
        exchange_text = (
            f"üí∞ **–ö—É—Ä—Å –≤–∞–ª—é—Ç (–¥–æ UAH)**:\n"
            f"üá∫üá∏ USD: {usd_to_base:.2f} –≥—Ä–Ω\n"
            f"üá™üá∫ EUR: {eur_to_base:.2f} –≥—Ä–Ω\n"
            f"üáµüá± PLN: {pln_to_base:.2f} –≥—Ä–Ω"
        )
        bot.reply_to(message, exchange_text, parse_mode='Markdown')
    except Exception as e:
        bot.reply_to(message, "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫—É—Ä—Å—É –≤–∞–ª—é—Ç.")
        print(f"–ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—é—Ç: {e}")

# --- –¶—ñ–Ω–∏ –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É ---
@bot.message_handler(commands=['crypto'])
def get_crypto_prices(message):
    try:
        params = {'ids':'bitcoin,ethereum,tether','vs_currencies':'usd,uah'}
        response = requests.get(CRYPTO_API_URL, params=params)
        data = response.json()
        btc_usd, btc_uah = data['bitcoin']['usd'], data['bitcoin']['uah']
        eth_usd, eth_uah = data['ethereum']['usd'], data['ethereum']['uah']
        usdt_usd, usdt_uah = data['tether']['usd'], data['tether']['uah']

        crypto_text = (
            f"‚Çø **–¶—ñ–Ω–∏ –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É**:\n\n"
            f"üìä BTC: {btc_usd:,} $ / {btc_uah:,.0f} –≥—Ä–Ω\n"
            f"üìä ETH: {eth_usd:,} $ / {eth_uah:,.0f} –≥—Ä–Ω\n"
            f"üìä USDT: {usdt_usd} $ / {usdt_uah:.2f} –≥—Ä–Ω"
        )
        bot.reply_to(message, crypto_text, parse_mode='Markdown')
    except Exception as e:
        bot.reply_to(message, "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ü—ñ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏.")
        print(f"–ü–æ–º–∏–ª–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏: {e}")

# --- Endpoint webhook –¥–ª—è Telegram ---
@app.route('/webhook', methods=['POST'])
def webhook():
    json_str = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return '', 200

# --- –¢–µ—Å—Ç–æ–≤–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –¥–ª—è Render ---
@app.route("/", methods=['GET'])
def index():
    return "Bot is running via Webhook on Render!", 200

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
