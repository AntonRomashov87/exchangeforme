import os
import telebot
import requests
from flask import Flask, request
import re # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –º–æ–¥—É–ª—å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Ä–µ–≥—É–ª—è—Ä–Ω–∏–º–∏ –≤–∏—Ä–∞–∑–∞–º–∏
from telebot import types # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ç–∏–ø–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫

# =======================
# Flask
# =======================
app = Flask(__name__)

# --- –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∑ Railway Environment Variables ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    print("‚ùå BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π. –ë—É–¥—å –ª–∞—Å–∫–∞, –¥–æ–¥–∞–π—Ç–µ –π–æ–≥–æ –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö Railway ‚Üí Variables.")
    exit()

bot = telebot.TeleBot(BOT_TOKEN)

# =======================
# API URLs
# =======================

# --- API –¥–ª—è –≤–∞–ª—é—Ç (–ù–ë–£) ---
EXCHANGE_API_URL = "https://bank.gov.ua/NBUStatService/v1/statdirectory/exchange?json"

# --- API –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏ (CoinGecko) ---
CRYPTO_API_URL = "https://api.coingecko.com/api/v3/coins/markets"

# --- –î–∞–Ω—ñ –¥–ª—è –ø–∞–ª—å–Ω–æ–≥–æ (–∑–∞–ª–∏—à–∞—î–º–æ —è–∫ –ø—Ä–∏–∫–ª–∞–¥) ---
def get_fuel_prices_data():
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Ñ—ñ–∫—Å–æ–≤–∞–Ω—ñ —Ü—ñ–Ω–∏ –Ω–∞ –ø–∞–ª—å–Ω–µ (—è–∫ –ø—Ä–∏–∫–ª–∞–¥, –∞–¥–∞–ø—Ç–æ–≤–∞–Ω–∏–π –ø—ñ–¥ –£–∫—Ä–∞—ó–Ω—É)"""
    return {
        "–î–∏–∑–µ–ª—å": 56.50,
        "–ê-95": 57.80,
        "–ê-92": 55.20
    }

# =======================
# –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –µ–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è Markdown
# =======================
def escape_markdown(text: str) -> str:
    """–ï–∫—Ä–∞–Ω—É—î —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏ –¥–ª—è Telegram MarkdownV2."""
    escape_chars = r"[_*\[\]()~`>#\+\-=|{}.!]"
    return re.sub(f'({escape_chars})', r'\\\1', text)

# =======================
# –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —Ç–∞ –∫–Ω–æ–ø–æ–∫
# =======================

# --- –ö–æ–º–∞–Ω–¥–∞ /start –∑'—è–≤–ª—è—î—Ç—å—Å—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ ---
@bot.message_handler(commands=["start", "help"])
def start(message):
    print(f"–û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É /start –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.chat.id}")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton("üí∞ –ö—É—Ä—Å –≤–∞–ª—é—Ç")
    btn2 = types.KeyboardButton("‚Çø –¢–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")
    btn3 = types.KeyboardButton("ü•á –¶—ñ–Ω–∏ –Ω–∞ –º–µ—Ç–∞–ª–∏")
    btn4 = types.KeyboardButton("‚õΩ –¶—ñ–Ω–∏ –Ω–∞ –ø–∞–ª—å–Ω–µ")
    markup.add(btn1, btn2, btn3, btn4)

    text = "–ü—Ä–∏–≤—ñ—Ç\\! üëã –Ø –±–æ—Ç\\-–ø–æ–º—ñ—á–Ω–∏–∫\\.\n\n–û–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –æ–ø—Ü—ñ–π –Ω–∏–∂—á–µ:"
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏
    bot.send_message(message.chat.id, text, reply_markup=markup, parse_mode='MarkdownV2')

# --- –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ö—É—Ä—Å –≤–∞–ª—é—Ç" ---
@bot.message_handler(func=lambda message: message.text == "üí∞ –ö—É—Ä—Å –≤–∞–ª—é—Ç")
def exchange(message):
    try:
        r = requests.get(EXCHANGE_API_URL).json()
        usd_rate = next(item for item in r if item["cc"] == "USD")["rate"]
        eur_rate = next(item for item in r if item["cc"] == "EUR")["rate"]
        pln_rate = next(item for item in r if item["cc"] == "PLN")["rate"]

        usd_str = f"{usd_rate:.2f}".replace(".", "\\.")
        eur_str = f"{eur_rate:.2f}".replace(".", "\\.")
        pln_str = f"{pln_rate:.2f}".replace(".", "\\.")
        
        text = (
            f"üí± *–ö—É—Ä—Å –≤–∞–ª—é—Ç \\(–¥–æ UAH\\)*\n\n"
            f"üá∫üá∏ USD: {usd_str}‚Ç¥\n"
            f"üá™üá∫ EUR: {eur_str}‚Ç¥\n"
            f"üáµüá± PLN: {pln_str}‚Ç¥"
        )
        bot.send_message(message.chat.id, text, parse_mode='MarkdownV2')
    except Exception as e:
        bot.send_message(message.chat.id, escape_markdown("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å –≤–∞–ª—é—Ç."))
        print(f"–ü–æ–º–∏–ª–∫–∞ –≤ exchange(): {e}")

# --- –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–¢–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç" ---
@bot.message_handler(func=lambda message: message.text == "‚Çø –¢–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")
def crypto(message):
    try:
        params = {"vs_currency": "usd", "order": "market_cap_desc", "per_page": 10, "page": 1}
        data = requests.get(CRYPTO_API_URL, params=params).json()

        text_lines = ["‚Çø *–¢–æ–ø\\-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç*"]
        for coin in data:
            price = f"{coin['current_price']:.2f}".replace(".", "\\.")
            change = f"{coin.get('price_change_percentage_24h', 0):.2f}".replace(".", "\\.").replace("-", "\\-")
            line = (f"*{coin['market_cap_rank']}\\. {coin['symbol'].upper()}*: "
                    f"{price}\\$ \\(üíπ {change}\\%\\)")
            text_lines.append(line)
        
        text = "\n".join(text_lines)
        bot.send_message(message.chat.id, text, parse_mode='MarkdownV2')
    except Exception as e:
        bot.send_message(message.chat.id, escape_markdown("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É."))
        print(f"–ü–æ–º–∏–ª–∫–∞ –≤ crypto(): {e}")

# --- –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–¶—ñ–Ω–∏ –Ω–∞ –º–µ—Ç–∞–ª–∏" ---
@bot.message_handler(func=lambda message: message.text == "ü•á –¶—ñ–Ω–∏ –Ω–∞ –º–µ—Ç–∞–ª–∏")
def metals(message):
    api_key = os.getenv("METALS_API_KEY")
    
    if not api_key:
        error_text = "‚ö†Ô∏è –ö–ª—é—á –¥–ª—è API –º–µ—Ç–∞–ª—ñ–≤ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π. –î–æ–¥–∞–π—Ç–µ METALS_API_KEY —É –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞."
        bot.send_message(message.chat.id, escape_markdown(error_text))
        print("–ü–æ–º–∏–ª–∫–∞: METALS_API_KEY –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
        return

    url = "https://api.apilayer.com/metals/latest?base=USD&symbols=XAU,XAG,XPT,XPD"
    headers = { "apikey": api_key }
    
    try:
        response = requests.get(url, headers=headers)
        data = response.json()

        # –ü–æ–∫—Ä–∞—â–µ–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
        if not data.get("success"):
            print(f"–ü–æ–º–∏–ª–∫–∞ API –º–µ—Ç–∞–ª—ñ–≤: {data}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—É –ø–æ–º–∏–ª–∫—É 'no Route matched'
            if data.get("message") == "no Route matched with those values":
                user_error_message = (
                    "‚ö†Ô∏è *–ü—Ä–æ–±–ª–µ–º–∞ –∑ –¥–æ—Å—Ç—É–ø–æ–º –¥–æ API –º–µ—Ç–∞–ª—ñ–≤\\.*\n\n"
                    "–°–µ—Ä–≤–µ—Ä –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤ –∑–∞–ø–∏—Ç\\. –ù–∞–π—ñ–º–æ–≤—ñ—Ä–Ω—ñ—à–µ, –≤–∞—à API –∫–ª—é—á –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π –Ω–∞ —Å–µ—Ä–≤—ñ—Å **Metals API**\\.\n\n"
                    "*–©–æ —Ä–æ–±–∏—Ç–∏?*\n"
                    "1\\. –ó–∞–π–¥—ñ—Ç—å —É —Å–≤—ñ–π –∞–∫–∞—É–Ω—Ç –Ω–∞ `apilayer.com`\\.\n"
                    "2\\. –ü–µ—Ä–µ–π–¥—ñ—Ç—å –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É [Metals API](https://apilayer.com/marketplace/metals-api)\\.\n"
                    "3\\. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –ø–ª–∞–Ω (**Free Plan**) —Å–∞–º–µ –¥–ª—è —Ü—å–æ–≥–æ API\\."
                )
                bot.send_message(message.chat.id, user_error_message, parse_mode='MarkdownV2', disable_web_page_preview=True)
            else:
                # –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ API
                api_error_info = data.get("error", {}).get("info", "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω–∏ –Ω–∞ –º–µ—Ç–∞–ª–∏.")
                bot.send_message(message.chat.id, escape_markdown(f"‚ö†Ô∏è {api_error_info}"))

            return # –ó—É–ø–∏–Ω—è—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫–∏

        rates = data['rates']
        gold_price = f"{rates.get('XAU', 0):.2f}".replace(".", "\\.")
        silver_price = f"{rates.get('XAG', 0):.2f}".replace(".", "\\.")
        platinum_price = f"{rates.get('XPT', 0):.2f}".replace(".", "\\.")
        palladium_price = f"{rates.get('XPD', 0):.2f}".replace(".", "\\.")
        
        text = (
            f"ü•á *–ú–µ—Ç–∞–ª–∏ \\(USD/oz\\)*\n\n"
            f"–ó–æ–ª–æ—Ç–æ: {gold_price}\\$\n"
            f"–°—Ä—ñ–±–ª–æ: {silver_price}\\$\n"
            f"–ü–ª–∞—Ç–∏–Ω–∞: {platinum_price}\\$\n"
            f"–ü–∞–ª–∞–¥—ñ–π: {palladium_price}\\$"
        )
        bot.send_message(message.chat.id, text, parse_mode='MarkdownV2')
    except Exception as e:
        bot.send_message(message.chat.id, escape_markdown("‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."))
        print(f"–ü–æ–º–∏–ª–∫–∞ –≤ metals(): {e}")

# --- –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–¶—ñ–Ω–∏ –Ω–∞ –ø–∞–ª—å–Ω–µ" ---
@bot.message_handler(func=lambda message: message.text == "‚õΩ –¶—ñ–Ω–∏ –Ω–∞ –ø–∞–ª—å–Ω–µ")
def fuel(message):
    try:
        fuel_prices = get_fuel_prices_data()
        text_lines = ["‚õΩ *–¶—ñ–Ω–∏ –Ω–∞ –ø–∞–ª—å–Ω–µ \\(–ø—Ä–∏–∫–ª–∞–¥\\):*"]
        for k, v in fuel_prices.items():
            price = f"{v:.2f}".replace(".", "\\.")
            escaped_k = k.replace("-", "\\-")
            text_lines.append(f"*{escaped_k}*: {price}‚Ç¥")
        
        text = "\n".join(text_lines)
        bot.send_message(message.chat.id, text, parse_mode='MarkdownV2')
    except Exception as e:
        bot.send_message(message.chat.id, escape_markdown("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ü—ñ–Ω–∏ –Ω–∞ –ø–∞–ª—å–Ω–µ."))
        print(f"–ü–æ–º–∏–ª–∫–∞ –≤ fuel(): {e}")

# =======================
# Webhook
# =======================
RAILWAY_STATIC_URL = os.getenv("RAILWAY_STATIC_URL")
WEBHOOK_URL = f"https://{RAILWAY_STATIC_URL}/webhook" if RAILWAY_STATIC_URL else ""

@app.route("/webhook", methods=["POST"])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return '', 200
    else:
        return 'Invalid content type', 403

@app.route("/", methods=["GET"])
def index():
    return "–ë–æ—Ç –ø—Ä–∞—Ü—é—î —á–µ—Ä–µ–∑ Webhook –Ω–∞ Railway!", 200

# =======================
# Flask –∑–∞–ø—É—Å–∫
# =======================
if __name__ == "__main__":
    if WEBHOOK_URL:
        try:
            current_webhook = bot.get_webhook_info()
            if current_webhook.url != WEBHOOK_URL:
                bot.remove_webhook()
                bot.set_webhook(url=WEBHOOK_URL)
                print(f"‚úÖ Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {WEBHOOK_URL}")
            else:
                print("‚úÖ Webhook –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
        except Exception as e:
            print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ Webhook: {e}")
    else:
        print("‚ö†Ô∏è –ó–º—ñ–Ω–Ω–∞ RAILWAY_STATIC_URL –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. Webhook –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
    
    port = int(os.getenv("PORT", 5000))
    app.run(host="0.0.0.0", port=port)

